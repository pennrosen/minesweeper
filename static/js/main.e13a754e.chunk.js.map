{"version":3,"sources":["components/mineCounter/MineCounter.js","components/timeCounter/TimeCounter.js","components/resetButton/ResetButton.js","components/grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["MineCounter","react_default","a","createElement","TimeCounter","ResetButton","props","face","gameStatus","className","src","alt","onClick","event","resetGame","Grid","columns","grid","cellStyle","cell","border","backgroundColor","isMine","boxShadow","gameBoard","map","col","row","key","style","hidden","onMouseDown","handleCellMouseDown","handleCellClick","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","rows","mines","minesFlagged","secondsSinceStart","bind","assertThisInitialized","setState","initGrid","preventDefault","console","log","_this$state","push","length","adjacentMines","flagged","i","rand","Math","floor","random","newGameStatus","newGrid","mineCounter_MineCounter","resetButton_ResetButton","timeCounter_TimeCounter","grid_Grid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e13a754e.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction MineCounter() {\n\n    return(\n        <div>\n            000\n        </div>\n    )\n}\n\nexport default MineCounter","import React from \"react\"\n\nfunction TimeCounter() {\n\n    return(\n        <div>\n            000 \n        </div>\n    )\n}\n\nexport default TimeCounter","import React from \"react\"\n\nfunction ResetButton(props) {\n\n    const faceHappy = \"./images/faceHappy.png\",\n          faceWorried = \"./images/faceWorried.png\", \n          faceCool = \"./images/faceCool.png\", \n          faceDead = \"./images/faceDead.png\"; \n\n    let face = \"\"\n    switch (props.gameStatus) {\n        case \"ready\":\n            face = faceHappy \n            break;\n        case \"selecting\":\n            face = faceWorried \n            break;\n        case \"win\":\n            face = faceCool \n            break;\n        case \"lose\":\n            face = faceDead \n            break;\n        default:\n            face = faceHappy\n            break;\n    }\n\n    return(\n        <div>\n            <img \n                className=\"reset-button\"\n                src={face} \n                alt={\":)\"}\n                onClick={event => props.resetGame(event)}\n                />\n        </div>\n    )\n}\n\nexport default ResetButton","import React from \"react\"\n\nfunction Grid(props) {\n\n    const { columns, grid } = props\n\n    const cellStyle = (cell) => ({\n        border: \"1px solid #7b7b7b\",\n        backgroundColor: cell.isMine ? \"red\" : \"#bdbdbd\",\n        boxShadow: \"none\" \n    })\n\n    let gameBoard = grid.map(cell => {\n\n        return (\n            <div \n                className={\"cell \" + (cell.col === columns ? \"last-col\" : \"\") }\n                row={cell.row}\n                col={cell.col}\n                key={cell.key}\n                style={!cell.hidden ? cellStyle(cell) : null}\n                onMouseDown={event => props.handleCellMouseDown(event, cell)}\n                onClick={event => props.handleCellClick(event, cell)}\n            >\n                {/* {cell.value} */}\n                {cell.isMine ? \"X\" : cell.value}\n            </div> \n        )\n    })\n\n    return(\n        <section className=\"game-grid\">\n            {gameBoard}\n        </section>\n    )\n}\n\nexport default Grid","import React, { Component } from \"react\"\nimport MineCounter from \"./components/mineCounter/MineCounter\"\nimport TimeCounter from \"./components/timeCounter/TimeCounter\"\nimport ResetButton from \"./components/resetButton/ResetButton\"\nimport Grid from \"./components/grid/Grid\"\nimport \"./styles/App.scss\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      loading: true,\n      rows: 9,\n      columns: 9,\n      mines: 10,\n      minesFlagged: 0,\n      secondsSinceStart: 0,\n      grid: []\n    }\n\n    this.resetGame = this.resetGame.bind(this)\n    this.handleCellMouseDown = this.handleCellMouseDown.bind(this)\n    this.handleCellClick = this.handleCellClick.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({ \n      loading: false\n    })\n    this.initGrid()\n  }\n\n  resetGame(event) {\n    event.preventDefault()\n    console.log(\"game started!\")\n    this.initGrid()\n  }\n\n  initGrid() {\n\n    const { rows, columns, mines } = this.state\n\n    // create a grid of cells \n    const grid = []\n    for (let row = 1; row <= rows; row++) {\n\n        for (let col = 1; col <= columns; col++) {\n            grid.push({\n                key: grid.length + 1, \n                row: row,\n                col: col,\n                hidden: true,\n                isMine: false,\n                adjacentMines: 0,\n                flagged: false,\n                value: \"\"\n            })\n        }\n\n    }\n\n    // lay mines\n    for (let i = 0; i < mines; i++) {\n        let rand = Math.floor(Math.random() * grid.length);\n        if (grid[rand].isMine === false) {\n            grid[rand].isMine = true\n        } else {\n            i--\n        } \n    }\n\n    this.setState({\n      grid: grid,\n      gameStatus: \"ready\"\n    })\n\n  }\n\n  handleCellMouseDown(event, cell) {\n      event.preventDefault()\n      let newGameStatus = this.state.gameStatus\n      if (cell.hidden) {newGameStatus = \"selecting\" }\n      this.setState({\n          gameStatus: newGameStatus \n      })\n  }\n\n  handleCellClick(event, cell) {\n      event.preventDefault()\n      console.log(\"x: \" + cell.col)\n      console.log(\"y: \" + cell.row)\n\n      let newGameStatus = this.state.gameStatus\n      if (cell.isMine) {\n          newGameStatus = \"lose\"\n          console.log(\"game over\")\n      } else {\n        newGameStatus = \"ready\"\n      }\n\n      let newGrid = this.state.grid\n      newGrid[cell.key - 1].hidden = false\n      newGrid[cell.key - 1].value = cell.key\n      this.setState({\n          grid: newGrid,\n          gameStatus: newGameStatus \n      })\n  }\n\n  render() {\n    return (\n      <article className=\"minesweeper\">\n        <section className=\"game-info\">\n          <MineCounter \n            minesFlagged={this.state.minesFlagged} \n          />\n          <ResetButton \n            resetGame={this.resetGame}\n            gameStatus={this.state.gameStatus}\n          />\n          <TimeCounter \n            secondsSinceStart={this.state.secondsSinceStart} \n          />\n        </section>\n        <Grid \n          rows={this.state.rows}\n          columns={this.state.columns}\n          mines={this.state.mines}\n          grid={this.state.grid}\n          gameStatus={this.state.gameStatus}\n          handleCellClick={this.handleCellClick}\n          handleCellMouseDown={this.handleCellMouseDown}\n        />\n      </article>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}